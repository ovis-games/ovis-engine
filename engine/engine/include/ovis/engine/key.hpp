#pragma once

#include <cstdint>
#include <limits>
#include <string_view>

#include <SDL2/SDL_scancode.h>

namespace ovis {

using KeyCode = uint16_t;

struct Key {
  KeyCode code;
  static_assert(std::numeric_limits<KeyCode>::max() >= SDL_NUM_SCANCODES);

  std::string_view id() const;
  std::string_view name() const;

  static void RegisterToLua();
  static Key FromName(const std::string& name);

  static const Key DIGIT_1;
  static const Key DIGIT_2;
  static const Key DIGIT_3;
  static const Key DIGIT_4;
  static const Key DIGIT_5;
  static const Key DIGIT_6;
  static const Key DIGIT_7;
  static const Key DIGIT_8;
  static const Key DIGIT_9;
  static const Key DIGIT_0;
  static const Key MINUS;
  static const Key EQUAL;
  static const Key NUMPAD_0;
  static const Key NUMPAD_1;
  static const Key NUMPAD_2;
  static const Key NUMPAD_3;
  static const Key NUMPAD_4;
  static const Key NUMPAD_5;
  static const Key NUMPAD_6;
  static const Key NUMPAD_7;
  static const Key NUMPAD_8;
  static const Key NUMPAD_9;
  static const Key NUMPAD_DECIMAL;
  static const Key NUMPAD_ENTER;
  static const Key NUMPAD_ADD;
  static const Key NUMPAD_SUBTRACT;
  static const Key NUMPAD_MULTIPLY;
  static const Key NUMPAD_DIVIDE;
  static const Key ESCAPE;
  static const Key INSERT;
  static const Key DELETE;
  static const Key HOME;
  static const Key END;
  static const Key PAGE_UP;
  static const Key PAGE_DOWN;
  static const Key TAB;
  static const Key ENTER;
  static const Key BACKSPACE;
  static const Key CONTROL_LEFT;
  static const Key CONTROL_RIGHT;
  static const Key ALT_LEFT;
  static const Key ALT_RIGHT;
  static const Key META_LEFT;
  static const Key META_RIGHT;
  static const Key SHIFT_LEFT;
  static const Key SHIFT_RIGHT;
  static const Key ARROW_UP;
  static const Key ARROW_DOWN;
  static const Key ARROW_LEFT;
  static const Key ARROW_RIGHT;
  static const Key BACKQUOTE;
  static const Key BRACKET_LEFT;
  static const Key BRACKET_RIGHT;
  static const Key SEMICOLON;
  static const Key QUOTE;
  static const Key BACKSLASH;
  static const Key COMMA;
  static const Key PERIOD;
  static const Key SLASH;
  static const Key INTL_BACKSLASH;
  static const Key SPACE;
  static const Key KEY_A;
  static const Key KEY_B;
  static const Key KEY_C;
  static const Key KEY_D;
  static const Key KEY_E;
  static const Key KEY_F;
  static const Key KEY_G;
  static const Key KEY_H;
  static const Key KEY_I;
  static const Key KEY_J;
  static const Key KEY_K;
  static const Key KEY_L;
  static const Key KEY_M;
  static const Key KEY_N;
  static const Key KEY_O;
  static const Key KEY_P;
  static const Key KEY_Q;
  static const Key KEY_R;
  static const Key KEY_S;
  static const Key KEY_T;
  static const Key KEY_U;
  static const Key KEY_V;
  static const Key KEY_W;
  static const Key KEY_X;
  static const Key KEY_Y;
  static const Key KEY_Z;
  static const Key F1;
  static const Key F2;
  static const Key F3;
  static const Key F4;
  static const Key F5;
  static const Key F6;
  static const Key F7;
  static const Key F8;
  static const Key F9;
  static const Key F10;
  static const Key F11;
  static const Key F12;
  static const Key F13;
  static const Key F14;
  static const Key F15;
  static const Key F16;
  static const Key F17;
  static const Key F18;
  static const Key F19;
  static const Key F20;
  static const Key F21;
  static const Key F22;
  static const Key F23;
  static const Key F24;
};
static_assert(sizeof(Key) == sizeof(KeyCode));

inline bool operator==(Key lhs, Key rhs) {
  return lhs.code == rhs.code;
}

inline bool operator!=(Key lhs, Key rhs) {
  return lhs.code != rhs.code;
}

constexpr Key Key::DIGIT_1{SDL_SCANCODE_1};
constexpr Key Key::DIGIT_2{SDL_SCANCODE_2};
constexpr Key Key::DIGIT_3{SDL_SCANCODE_3};
constexpr Key Key::DIGIT_4{SDL_SCANCODE_4};
constexpr Key Key::DIGIT_5{SDL_SCANCODE_5};
constexpr Key Key::DIGIT_6{SDL_SCANCODE_6};
constexpr Key Key::DIGIT_7{SDL_SCANCODE_7};
constexpr Key Key::DIGIT_8{SDL_SCANCODE_8};
constexpr Key Key::DIGIT_9{SDL_SCANCODE_9};
constexpr Key Key::DIGIT_0{SDL_SCANCODE_0};
constexpr Key Key::MINUS{SDL_SCANCODE_MINUS};
constexpr Key Key::EQUAL{SDL_SCANCODE_EQUALS};
constexpr Key Key::NUMPAD_0{SDL_SCANCODE_KP_0};
constexpr Key Key::NUMPAD_1{SDL_SCANCODE_KP_1};
constexpr Key Key::NUMPAD_2{SDL_SCANCODE_KP_2};
constexpr Key Key::NUMPAD_3{SDL_SCANCODE_KP_3};
constexpr Key Key::NUMPAD_4{SDL_SCANCODE_KP_4};
constexpr Key Key::NUMPAD_5{SDL_SCANCODE_KP_5};
constexpr Key Key::NUMPAD_6{SDL_SCANCODE_KP_6};
constexpr Key Key::NUMPAD_7{SDL_SCANCODE_KP_7};
constexpr Key Key::NUMPAD_8{SDL_SCANCODE_KP_8};
constexpr Key Key::NUMPAD_9{SDL_SCANCODE_KP_9};
constexpr Key Key::NUMPAD_DECIMAL{SDL_SCANCODE_KP_PERIOD};
constexpr Key Key::NUMPAD_ENTER{SDL_SCANCODE_KP_ENTER};
constexpr Key Key::NUMPAD_ADD{SDL_SCANCODE_KP_PLUS};
constexpr Key Key::NUMPAD_SUBTRACT{SDL_SCANCODE_KP_MINUS};
constexpr Key Key::NUMPAD_MULTIPLY{SDL_SCANCODE_KP_MULTIPLY};
constexpr Key Key::NUMPAD_DIVIDE{SDL_SCANCODE_KP_DIVIDE};
constexpr Key Key::ESCAPE{SDL_SCANCODE_ESCAPE};
constexpr Key Key::INSERT{SDL_SCANCODE_INSERT};
constexpr Key Key::DELETE{SDL_SCANCODE_DELETE};
constexpr Key Key::HOME{SDL_SCANCODE_HOME};
constexpr Key Key::END{SDL_SCANCODE_END};
constexpr Key Key::PAGE_UP{SDL_SCANCODE_PAGEUP};
constexpr Key Key::PAGE_DOWN{SDL_SCANCODE_PAGEDOWN};
constexpr Key Key::TAB{SDL_SCANCODE_TAB};
constexpr Key Key::ENTER{SDL_SCANCODE_RETURN};
constexpr Key Key::BACKSPACE{SDL_SCANCODE_BACKSPACE};
constexpr Key Key::CONTROL_LEFT{SDL_SCANCODE_LCTRL};
constexpr Key Key::CONTROL_RIGHT{SDL_SCANCODE_RCTRL};
constexpr Key Key::ALT_LEFT{SDL_SCANCODE_LALT};
constexpr Key Key::ALT_RIGHT{SDL_SCANCODE_RALT};
constexpr Key Key::META_LEFT{SDL_SCANCODE_LGUI};
constexpr Key Key::META_RIGHT{SDL_SCANCODE_RGUI};
constexpr Key Key::SHIFT_LEFT{SDL_SCANCODE_LSHIFT};
constexpr Key Key::SHIFT_RIGHT{SDL_SCANCODE_RSHIFT};
constexpr Key Key::ARROW_UP{SDL_SCANCODE_UP};
constexpr Key Key::ARROW_DOWN{SDL_SCANCODE_DOWN};
constexpr Key Key::ARROW_LEFT{SDL_SCANCODE_LEFT};
constexpr Key Key::ARROW_RIGHT{SDL_SCANCODE_RIGHT};
constexpr Key Key::BACKQUOTE{SDL_SCANCODE_GRAVE};
constexpr Key Key::BRACKET_LEFT{SDL_SCANCODE_LEFTBRACKET};
constexpr Key Key::BRACKET_RIGHT{SDL_SCANCODE_RIGHTBRACKET};
constexpr Key Key::SEMICOLON{SDL_SCANCODE_SEMICOLON};
constexpr Key Key::QUOTE{SDL_SCANCODE_APOSTROPHE};
constexpr Key Key::BACKSLASH{SDL_SCANCODE_BACKSLASH};
constexpr Key Key::COMMA{SDL_SCANCODE_COMMA};
constexpr Key Key::PERIOD{SDL_SCANCODE_PERIOD};
constexpr Key Key::SLASH{SDL_SCANCODE_SLASH};
constexpr Key Key::INTL_BACKSLASH{SDL_SCANCODE_NONUSBACKSLASH};
constexpr Key Key::SPACE{SDL_SCANCODE_SPACE};
constexpr Key Key::KEY_A{SDL_SCANCODE_A};
constexpr Key Key::KEY_B{SDL_SCANCODE_B};
constexpr Key Key::KEY_C{SDL_SCANCODE_C};
constexpr Key Key::KEY_D{SDL_SCANCODE_D};
constexpr Key Key::KEY_E{SDL_SCANCODE_E};
constexpr Key Key::KEY_F{SDL_SCANCODE_F};
constexpr Key Key::KEY_G{SDL_SCANCODE_G};
constexpr Key Key::KEY_H{SDL_SCANCODE_H};
constexpr Key Key::KEY_I{SDL_SCANCODE_I};
constexpr Key Key::KEY_J{SDL_SCANCODE_J};
constexpr Key Key::KEY_K{SDL_SCANCODE_K};
constexpr Key Key::KEY_L{SDL_SCANCODE_L};
constexpr Key Key::KEY_M{SDL_SCANCODE_M};
constexpr Key Key::KEY_N{SDL_SCANCODE_N};
constexpr Key Key::KEY_O{SDL_SCANCODE_O};
constexpr Key Key::KEY_P{SDL_SCANCODE_P};
constexpr Key Key::KEY_Q{SDL_SCANCODE_Q};
constexpr Key Key::KEY_R{SDL_SCANCODE_R};
constexpr Key Key::KEY_S{SDL_SCANCODE_S};
constexpr Key Key::KEY_T{SDL_SCANCODE_T};
constexpr Key Key::KEY_U{SDL_SCANCODE_U};
constexpr Key Key::KEY_V{SDL_SCANCODE_V};
constexpr Key Key::KEY_W{SDL_SCANCODE_W};
constexpr Key Key::KEY_X{SDL_SCANCODE_X};
constexpr Key Key::KEY_Y{SDL_SCANCODE_Y};
constexpr Key Key::KEY_Z{SDL_SCANCODE_Z};
constexpr Key Key::F1{SDL_SCANCODE_F1};
constexpr Key Key::F2{SDL_SCANCODE_F2};
constexpr Key Key::F3{SDL_SCANCODE_F3};
constexpr Key Key::F4{SDL_SCANCODE_F4};
constexpr Key Key::F5{SDL_SCANCODE_F5};
constexpr Key Key::F6{SDL_SCANCODE_F6};
constexpr Key Key::F7{SDL_SCANCODE_F7};
constexpr Key Key::F8{SDL_SCANCODE_F8};
constexpr Key Key::F9{SDL_SCANCODE_F9};
constexpr Key Key::F10{SDL_SCANCODE_F10};
constexpr Key Key::F11{SDL_SCANCODE_F11};
constexpr Key Key::F12{SDL_SCANCODE_F12};
constexpr Key Key::F13{SDL_SCANCODE_F13};
constexpr Key Key::F14{SDL_SCANCODE_F14};
constexpr Key Key::F15{SDL_SCANCODE_F15};
constexpr Key Key::F16{SDL_SCANCODE_F16};
constexpr Key Key::F17{SDL_SCANCODE_F17};
constexpr Key Key::F18{SDL_SCANCODE_F18};
constexpr Key Key::F19{SDL_SCANCODE_F19};
constexpr Key Key::F20{SDL_SCANCODE_F20};
constexpr Key Key::F21{SDL_SCANCODE_F21};
constexpr Key Key::F22{SDL_SCANCODE_F22};
constexpr Key Key::F23{SDL_SCANCODE_F23};
constexpr Key Key::F24{SDL_SCANCODE_F24};

}  // namespace ovis
